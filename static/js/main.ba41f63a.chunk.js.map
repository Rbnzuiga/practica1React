{"version":3,"sources":["logoitt.jpg","Components/Header.js","Components/Body.js","Components/Footer.js","Components/Banner.js","Components/Banner2.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","titulo","Component","Body","t6","texto1","texto2","texto3","texto4","texto5","Footer","pie","banner","Banner2","src","logoitt","alt","App","alert","onClick","funcAlerta","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAAe,MAA0B,oCCkBtBA,G,mLAZP,OACH,qBAAKC,UAAU,SAAf,SACD,4BACKC,KAAKC,MAAMC,e,GALHC,c,MCoBNC,MArBf,SAAcH,GAIV,OACI,sBAAKF,UAAU,OAAf,UACI,4BAAIE,EAAMI,KACX,+BACC,6BAAKJ,EAAMK,SACX,6BAAKL,EAAMM,SACX,6BAAKN,EAAMO,SACX,6BAAKP,EAAMQ,SACX,6BAAKR,EAAMS,gB,MCJRC,MAPf,SAAgBV,GACZ,OACI,qBAAKF,UAAU,SAAf,SACKE,EAAMW,OCKJC,G,KAPA,WACb,OACE,qBAAKd,UAAU,SAAf,SACI,0FCWOe,EAdA,WAEP,OACH,sBAAKf,UAAU,UAAf,UACI,qBAAKgB,IAAKC,EAASjB,UAAY,WAAWkB,IAAI,SACnD,0BCuCWC,E,2KAnCXC,MAAM,gB,+BAEC,IAAD,OACR,OAEE,sBAAKpB,UAAU,MAAf,UACA,8BAAK,cAAC,EAAD,MAGL,cAAC,EAAD,IACA,cAAC,EAAD,CACAG,OAAO,eAEP,cAAC,EAAD,CACAG,GAAG,uBACHC,OAAO,uBACPC,OAAO,eACPC,OAAO,4BACPC,OAAO,YACPC,OAAO,UAGX,uCAAS,wBAAQU,QAAS,kBAAI,EAAKC,cAA1B,2BAIL,cAAC,EAAD,CACAT,IAAK,sF,GA7BST,aCAEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba41f63a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoitt.da78bd05.jpg\";","import React, {Component} from 'react';\r\nimport './Header.css'\r\n//import logo from '../logo.svg'\r\n\r\nclass Header extends Component{\r\n        render()  {\r\n            return(\r\n         <div className=\"Header\">\r\n        <p>\r\n            {this.props.titulo}\r\n        </p>\r\n\r\n         </div>\r\n\r\n\r\n    );\r\n        }\r\n    }\r\n    export default Header; ","import React from 'react';\r\nimport './Body.css';\r\n\r\nfunction Body(props){\r\n   \r\n\r\n\r\n    return(\r\n        <div className=\"Body\">\r\n            <p>{props.t6}</p>\r\n           <ol>\r\n            <li>{props.texto1}</li>\r\n            <li>{props.texto2}</li>\r\n            <li>{props.texto3}</li>\r\n            <li>{props.texto4}</li>\r\n            <li>{props.texto5}</li>\r\n\r\n\r\n\r\n\r\n           </ol>\r\n            \r\n        </div>    )\r\n}\r\nexport default Body;","import React from 'react';\r\nimport './Footer.css';\r\n\r\n\r\nfunction Footer(props){\r\n    return(\r\n        <div className=\"Footer\">\r\n            {props.pie}\r\n        </div>\r\n    )\r\n}\r\nexport default Footer;","import React from 'react';\r\nimport './Banner.css'\r\n\r\n\r\n\r\nconst banner = ()=>{\r\n  return(\r\n    <div className=\"banner\">\r\n        <h5>Desarrollo de Aplicaciones Para Dispositivos Moviles</h5>\r\n    </div>\r\n  )\r\n}\r\nexport default banner;","import React from 'react';\r\nimport './Banner.css'\r\nimport logoitt from '../logoitt.jpg'\r\n\r\n\r\nconst Banner2 =()=>{\r\n   \r\n        return(\r\n     <div className=\"Banner2\">\r\n         <img src={logoitt} className = \"App-logo\" alt=\"logo\"/>\r\n    <p>\r\n    </p>\r\n\r\n     </div>\r\n\r\n\r\n);\r\n    }\r\n\r\nexport default Banner2;","import React,{Component} from 'react';\n//import React from 'react';\nimport logoitt from './logoitt.jpg';\nimport './App.css';\nimport Header from './Components/Header';\nimport Body from './Components/Body';\nimport Footer from './Components/Footer';\nimport Banner from './Components/Banner';\nimport banner from './Components/Banner';\nimport Banner2 from './Components/Banner2';\n\n\nclass App extends Component{\n  funcAlerta(){\n    alert(\"hola mundo\")\n}\n  render(){\n  return (\n    \n    <div className=\"App\">\n    <div><Banner></Banner>\n    </div>\n\n    <Banner2/>  \n    <Header\n    titulo=\"27/10/2020\" \n    />\n    <Body \n    t6=\"Practica 1 - Unidad2\"\n    texto1=\"Tipos de componentes\"\n    texto2=\"Contenedores\"\n    texto3=\"Usar mas de un componente\"\n    texto4=\"Funciones\"\n    texto5=\"Props\"\n\n        />\n<div>    <button onClick={()=>this.funcAlerta()}>dale click</button>\n</div>\n\n\n    <Footer\n    pie={<p>Copyright Â© Todos los derechos reservados</p>}\n    />\n\n    </div>\n    \n  )}; \n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}